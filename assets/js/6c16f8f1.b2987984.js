"use strict";(self.webpackChunkcamunda_platform_rest_api=self.webpackChunkcamunda_platform_rest_api||[]).push([[820],{58496:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>h,default:()=>j,frontMatter:()=>u,metadata:()=>b,toc:()=>f});var o=a(87462),r=(a(67294),a(3905)),i=a(38055),n=(a(47878),a(55878)),s=a(51663),l=a(98045),p=a(91795),d=a(18211),m=a(55985),c=a(85162);const u={id:"update-job",title:"Update a Job",description:"Can be used to:",sidebar_label:"Update a Job",hide_title:!0,hide_table_of_contents:!0,api:{description:"Can be used to:\n\n### Complete the job\n\nSet the `status` of the job to `completed`, with:\n  - (optionally) `variables`\n\n### Fail the job\n\nSet the `status` of the job to `failed`, with:\n  - `retries`\n  - (optionally) `retryBackoff`\n  - (optionally) `errorMessage`\n\n### Throw an error for the job\n\nSet the `status` of the job to `error_thrown`, with:\n  - `errorCode`\n  - (optionally) `errorMessage`",operationId:"updateJob",parameters:[{name:"key",description:"Key (unique identifier) of the job to update",in:"path",required:!0,schema:{type:"integer",format:"int64"}}],requestBody:{content:{"application/json":{schema:{title:"A request to update a job",description:"A request to update a job",type:"object",properties:{status:{type:"string",example:"completed",description:"Requested state for the job, either one of `completed`, `failed`, or `error_thrown`"},retries:{type:"integer",format:"int32",description:"Number of retries for the job when it `failed`"},retryBackoff:{type:"string",default:"0ms",example:"2s 500ms",description:"Duration after which the job becomes `activatable` again when it `failed`"},errorCode:{type:"string",description:"Code to match an error catch event when job state `error_thrown` requested"},errorMessage:{type:"string",description:"Message to describe the error when job state `error_thrown` requested"},variables:{type:"object",additionalProperties:!0,description:"Variables to set for the job"}},required:["status"]}}},description:"A request to update a job",required:!0},"x-codegen-request-body-name":"body",responses:{204:{description:"Successfully updated the job",content:{"application/json":{schema:{title:"A response to an UpdateJobRequest",description:"A response to an UpdateJobRequest",type:"object",properties:{data:{},error:{type:"string"}}}}}},503:{description:"Unable to connect to Zeebe cluster"}},tags:["Process-Automation"],method:"patch",path:"/jobs/{key}",jsonRequestBodyExample:{status:"completed",retries:0,retryBackoff:"2s 500ms",errorCode:"string",errorMessage:"string",variables:{}},info:{title:"Camunda Platform REST API",description:"REST API to interact with Camunda Platform 8.\n\n:::caution\n\nThis API is not yet stable - we may break backward compatibility in newer releases of `v0`.\n\n:::",version:"0.2.0-SNAPSHOT"},postman:{name:"Update a Job",description:{content:"Can be used to:\n\n### Complete the job\n\nSet the `status` of the job to `completed`, with:\n  - (optionally) `variables`\n\n### Fail the job\n\nSet the `status` of the job to `failed`, with:\n  - `retries`\n  - (optionally) `retryBackoff`\n  - (optionally) `errorMessage`\n\n### Throw an error for the job\n\nSet the `status` of the job to `error_thrown`, with:\n  - `errorCode`\n  - (optionally) `errorMessage`",type:"text/plain"},url:{path:["jobs",":key"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Key (unique identifier) of the job to update",type:"text/plain"},type:"any",value:"",key:"key"}]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"PATCH",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"patch api-method",info_path:"docs/api/camunda-platform-rest-api",custom_edit_url:null},h=void 0,b={unversionedId:"api/update-job",id:"api/update-job",title:"Update a Job",description:"Can be used to:",source:"@site/docs/api/update-job.api.mdx",sourceDirName:"api",slug:"/api/update-job",permalink:"/camunda-platform-rest-api/docs/api/update-job",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"update-job",title:"Update a Job",description:"Can be used to:",sidebar_label:"Update a Job",hide_title:!0,hide_table_of_contents:!0,api:{description:"Can be used to:\n\n### Complete the job\n\nSet the `status` of the job to `completed`, with:\n  - (optionally) `variables`\n\n### Fail the job\n\nSet the `status` of the job to `failed`, with:\n  - `retries`\n  - (optionally) `retryBackoff`\n  - (optionally) `errorMessage`\n\n### Throw an error for the job\n\nSet the `status` of the job to `error_thrown`, with:\n  - `errorCode`\n  - (optionally) `errorMessage`",operationId:"updateJob",parameters:[{name:"key",description:"Key (unique identifier) of the job to update",in:"path",required:!0,schema:{type:"integer",format:"int64"}}],requestBody:{content:{"application/json":{schema:{title:"A request to update a job",description:"A request to update a job",type:"object",properties:{status:{type:"string",example:"completed",description:"Requested state for the job, either one of `completed`, `failed`, or `error_thrown`"},retries:{type:"integer",format:"int32",description:"Number of retries for the job when it `failed`"},retryBackoff:{type:"string",default:"0ms",example:"2s 500ms",description:"Duration after which the job becomes `activatable` again when it `failed`"},errorCode:{type:"string",description:"Code to match an error catch event when job state `error_thrown` requested"},errorMessage:{type:"string",description:"Message to describe the error when job state `error_thrown` requested"},variables:{type:"object",additionalProperties:!0,description:"Variables to set for the job"}},required:["status"]}}},description:"A request to update a job",required:!0},"x-codegen-request-body-name":"body",responses:{204:{description:"Successfully updated the job",content:{"application/json":{schema:{title:"A response to an UpdateJobRequest",description:"A response to an UpdateJobRequest",type:"object",properties:{data:{},error:{type:"string"}}}}}},503:{description:"Unable to connect to Zeebe cluster"}},tags:["Process-Automation"],method:"patch",path:"/jobs/{key}",jsonRequestBodyExample:{status:"completed",retries:0,retryBackoff:"2s 500ms",errorCode:"string",errorMessage:"string",variables:{}},info:{title:"Camunda Platform REST API",description:"REST API to interact with Camunda Platform 8.\n\n:::caution\n\nThis API is not yet stable - we may break backward compatibility in newer releases of `v0`.\n\n:::",version:"0.2.0-SNAPSHOT"},postman:{name:"Update a Job",description:{content:"Can be used to:\n\n### Complete the job\n\nSet the `status` of the job to `completed`, with:\n  - (optionally) `variables`\n\n### Fail the job\n\nSet the `status` of the job to `failed`, with:\n  - `retries`\n  - (optionally) `retryBackoff`\n  - (optionally) `errorMessage`\n\n### Throw an error for the job\n\nSet the `status` of the job to `error_thrown`, with:\n  - `errorCode`\n  - (optionally) `errorMessage`",type:"text/plain"},url:{path:["jobs",":key"],host:["{{baseUrl}}"],query:[],variable:[{disabled:!1,description:{content:"(Required) Key (unique identifier) of the job to update",type:"text/plain"},type:"any",value:"",key:"key"}]},header:[{key:"Content-Type",value:"application/json"},{key:"Accept",value:"application/json"}],method:"PATCH",body:{mode:"raw",raw:'""',options:{raw:{language:"json"}}}}},sidebar_class_name:"patch api-method",info_path:"docs/api/camunda-platform-rest-api",custom_edit_url:null},sidebar:"openApiSidebar",previous:{title:"Activate Jobs of a specific type",permalink:"/camunda-platform-rest-api/docs/api/activate-jobs"}},y={},f=[{value:"Complete the job",id:"complete-the-job",level:3},{value:"Fail the job",id:"fail-the-job",level:3},{value:"Throw an error for the job",id:"throw-an-error-for-the-job",level:3}],k={toc:f};function j(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{className:"openapi__heading"},"Update a Job"),(0,r.kt)(n.Z,{method:"patch",path:"/jobs/{key}",mdxType:"MethodEndpoint"}),(0,r.kt)("p",null,"Can be used to:"),(0,r.kt)("h3",{id:"complete-the-job"},"Complete the job"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," of the job to ",(0,r.kt)("inlineCode",{parentName:"p"},"completed"),", with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"(optionally) ",(0,r.kt)("inlineCode",{parentName:"li"},"variables"))),(0,r.kt)("h3",{id:"fail-the-job"},"Fail the job"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," of the job to ",(0,r.kt)("inlineCode",{parentName:"p"},"failed"),", with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retries")),(0,r.kt)("li",{parentName:"ul"},"(optionally) ",(0,r.kt)("inlineCode",{parentName:"li"},"retryBackoff")),(0,r.kt)("li",{parentName:"ul"},"(optionally) ",(0,r.kt)("inlineCode",{parentName:"li"},"errorMessage"))),(0,r.kt)("h3",{id:"throw-an-error-for-the-job"},"Throw an error for the job"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," of the job to ",(0,r.kt)("inlineCode",{parentName:"p"},"error_thrown"),", with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"errorCode")),(0,r.kt)("li",{parentName:"ul"},"(optionally) ",(0,r.kt)("inlineCode",{parentName:"li"},"errorMessage"))),(0,r.kt)("details",{style:{marginBottom:"1rem"},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,r.kt)("summary",{style:{}},(0,r.kt)("strong",null,"Path Parameters")),(0,r.kt)("div",null,(0,r.kt)("ul",null,(0,r.kt)(l.Z,{className:"paramsItem",param:{name:"key",description:"Key (unique identifier) of the job to update",in:"path",required:!0,schema:{type:"integer",format:"int64"}},mdxType:"ParamsItem"})))),(0,r.kt)(s.Z,{className:"openapi-tabs__mime",mdxType:"MimeTabs"},(0,r.kt)(c.Z,{label:"application/json",value:"application/json-schema",mdxType:"TabItem"},(0,r.kt)("details",{style:{},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,r.kt)("summary",{style:{textAlign:"left"}},(0,r.kt)("strong",null,"Request Body"),(0,r.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," required")),(0,r.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}},(0,r.kt)("div",{style:{marginTop:"1rem",marginBottom:"1rem"}},(0,r.kt)("p",null,"A request to update a job"))),(0,r.kt)("ul",{style:{marginLeft:"1rem"}},(0,r.kt)(d.Z,{collapsible:!1,name:"status",required:!0,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",example:"completed",description:"Requested state for the job, either one of `completed`, `failed`, or `error_thrown`"},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!1,name:"retries",required:!1,schemaName:"int32",qualifierMessage:void 0,schema:{type:"integer",format:"int32",description:"Number of retries for the job when it `failed`"},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!1,name:"retryBackoff",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",default:"0ms",example:"2s 500ms",description:"Duration after which the job becomes `activatable` again when it `failed`"},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!1,name:"errorCode",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Code to match an error catch event when job state `error_thrown` requested"},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!1,name:"errorMessage",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string",description:"Message to describe the error when job state `error_thrown` requested"},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,r.kt)("details",{style:{},className:"openapi-markdown__details"},(0,r.kt)("summary",{style:{}},(0,r.kt)("strong",null,"variables"),(0,r.kt)("span",{style:{opacity:"0.6"}}," object")),(0,r.kt)("div",{style:{marginLeft:"1rem"}},(0,r.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,r.kt)("p",null,"Variables to set for the job"))))))))),(0,r.kt)("div",null,(0,r.kt)("div",null,(0,r.kt)(i.Z,{mdxType:"ApiTabs"},(0,r.kt)(c.Z,{label:"204",value:"204",mdxType:"TabItem"},(0,r.kt)("div",null,(0,r.kt)("p",null,"Successfully updated the job")),(0,r.kt)("div",null,(0,r.kt)(s.Z,{className:"openapi-tabs__mime",schemaType:"response",mdxType:"MimeTabs"},(0,r.kt)(c.Z,{label:"application/json",value:"application/json",mdxType:"TabItem"},(0,r.kt)(m.Z,{className:"openapi-tabs__schema",mdxType:"SchemaTabs"},(0,r.kt)(c.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,r.kt)("details",{style:{},className:"openapi-markdown__details","data-collapsed":!1,open:!0},(0,r.kt)("summary",{style:{textAlign:"left"}},(0,r.kt)("strong",null,"Schema")),(0,r.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,r.kt)("ul",{style:{marginLeft:"1rem"}},(0,r.kt)(d.Z,{collapsible:!1,name:"data",required:!1,schemaName:"",qualifierMessage:void 0,schema:{},mdxType:"SchemaItem"}),(0,r.kt)(d.Z,{collapsible:!1,name:"error",required:!1,schemaName:"string",qualifierMessage:void 0,schema:{type:"string"},mdxType:"SchemaItem"})))),(0,r.kt)(c.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,r.kt)(p.Z,{responseExample:'{\n  "data": {},\n  "error": "string"\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,r.kt)(c.Z,{label:"503",value:"503",mdxType:"TabItem"},(0,r.kt)("div",null,(0,r.kt)("p",null,"Unable to connect to Zeebe cluster")),(0,r.kt)("div",null))))))}j.isMDXComponent=!0}}]);